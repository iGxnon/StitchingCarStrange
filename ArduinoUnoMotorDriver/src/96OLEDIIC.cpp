/********************金逸晨**************************
*****************0.96  4PIN IIC OLED FOR Arduino*************
***** BY:GU
********************************************************/

#include <Wire.h>
#include <Arduino.h>

const unsigned char *point;

const unsigned char OLED_init_cmd[25] =
    {
        /*0xae,0X00,0X10,0x40,0X81,0XCF,0xff,0xa1,0xa4,
    0xA6,0xc8,0xa8,0x3F,0xd5,0x80,0xd3,0x00,0XDA,0X12,
    0x8d,0x14,0xdb,0x40,0X20,0X02,0xd9,0xf1,0xAF*/
        0xAE, //关闭显示
        0xD5, //设置时钟分频因子,震荡频率
        0x80, //[3:0],分频因子;[7:4],震荡频率

        0xA8, //设置驱动路数
        0X3F, //默认0X3F(1/64)
        0xD3, //设置显示偏移
        0X00, //默认为0
        0x40, //设置显示开始行[5:0],行数.
        0x8D, //电荷泵设置
        0x14, //bit2,开启/关闭
        0x20, //设置内存地址模式
        0x02, //[1:0],00,列地址模式;01,行地址模式;10,页地址模式;默认10;
        0xA1, //段重定义设置,bit0:0,0->0;1,0->127;
        0xC8, //设置COM扫描方向;bit3:0,普通模式;1,重定义模式COM[N-1]->COM0;N:驱动路数
        0xDA, //设置COM硬件引脚配置
        0x12, //[5:4]配置
        0x81, //对比度设置
        0xEF, //1~255;默认0X7F(亮度设置,越大越亮)
        0xD9, //设置预充电周期
        0xf1, //[3:0],PHASE1;[7:4],PHASE2;
        0xDB, //设置VCOMH电压倍率
        0x30, //[6:4]000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
        0xA4, //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
        0xA6, //设置显示方式;bit0:1,反相显示;0,正常显示
        0xAF, //开启显示
};

const unsigned char picture_tab[] = {
    0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x44, 0x08, 0x00, 0x18, 0x48, 0x28, 0xC8, 0x08, 0x28, 0x48, 0x18, 0x00,
    0x40, 0x40, 0xFC, 0x40, 0x40, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xFC, 0x00, 0x40, 0x40, 0xA0,
    0x90, 0x88, 0x84, 0x88, 0x90, 0x20, 0x40, 0x40, 0x00, 0x00, 0x40, 0x44, 0xD8, 0x20, 0xF0, 0xAC,
    0xA8, 0xE8, 0xB8, 0xA8, 0xE0, 0x00, 0x00, 0x00, 0xC0, 0x7C, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54,
    0x7C, 0x40, 0x40, 0x00, 0x00, 0xF0, 0x90, 0x90, 0x90, 0xFC, 0x90, 0x90, 0x90, 0xF0, 0x00, 0x00,
    0x00, 0x80, 0x88, 0x88, 0x88, 0x88, 0x88, 0xE8, 0xA8, 0x98, 0x8C, 0x88, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x04, 0x3E, 0x01, 0x10, 0x11, 0x09, 0x05, 0x3F, 0x05, 0x09, 0x11, 0x11, 0x00,
    0x08, 0x18, 0x0F, 0x24, 0x14, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x3F, 0x00, 0x20, 0x22, 0x2A,
    0x32, 0x22, 0x3F, 0x22, 0x32, 0x2A, 0x22, 0x20, 0x00, 0x00, 0x20, 0x10, 0x0F, 0x10, 0x28, 0x24,
    0x23, 0x20, 0x2F, 0x28, 0x2A, 0x2C, 0x00, 0x30, 0x0F, 0x04, 0x3D, 0x25, 0x15, 0x15, 0x0D, 0x15,
    0x2D, 0x24, 0x24, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x1F, 0x24, 0x24, 0x24, 0x27, 0x20, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
    0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x81, 0x41, 0x21, 0x21, 0x61, 0x01, 0x01, 0x21, 0xE1, 0xE1, 0x01, 0xE1, 0xE1,
    0x21, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x21, 0xE1, 0x21, 0x21, 0x21, 0x61, 0x01, 0x01,
    0x21, 0x21, 0xE1, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xC1, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x21, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0F, 0x10, 0x20, 0x24, 0x1C, 0x04, 0x00, 0x20, 0x3F, 0x01, 0x3E, 0x01, 0x3F,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x22, 0x22, 0x27, 0x30, 0x00, 0x00,
    0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, 0x1E, 0x25, 0x25, 0x25, 0x16, 0x00, 0x00, 0x1E, 0x21,
    0x21, 0x21, 0x13, 0x00, 0x01, 0x01, 0x1F, 0x21, 0x21, 0x00, 0x00, 0x00, 0x21, 0x3F, 0x22, 0x21,
    0x01, 0x00, 0x00, 0x1E, 0x21, 0x21, 0x21, 0x1E, 0x00, 0x21, 0x3F, 0x22, 0x01, 0x01, 0x3E, 0x20,
    0x00, 0x21, 0x21, 0x3F, 0x20, 0x20, 0x00, 0x00, 0x1E, 0x21, 0x21, 0x21, 0x13, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xF0, 0x08, 0x04, 0x04, 0x04, 0x0C, 0x00, 0xF0, 0x08, 0x04, 0x04, 0x08, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFC, 0x04, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0xFC, 0x04, 0x0C, 0x00, 0x04, 0xFC, 0x04, 0x04, 0x08, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x81, 0x82, 0x84, 0x84, 0x84, 0x82, 0x80, 0x81, 0x82, 0x84, 0x84, 0x82, 0x81,
    0x80, 0x80, 0x86, 0x86, 0x80, 0x80, 0x80, 0x80, 0x80, 0x85, 0x83, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x84, 0x87, 0x84, 0x84,
    0x84, 0x86, 0x80, 0x80, 0x80, 0x84, 0x87, 0x84, 0x80, 0x80, 0x84, 0x87, 0x84, 0x84, 0x82, 0x81,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF};

/**************************IIC模块发送函数************************************************

 *************************************************************************/
//写入  最后将SDA拉高，以等待从设备产生应答
void IIC_write(unsigned char date)
{
  unsigned char i, temp;
  temp = date;

  for (i = 0; i < 8; i++)
  {
    digitalWrite(SCL, LOW);

    if ((temp & 0x80) == 0)
      digitalWrite(SDA, LOW);
    else
      digitalWrite(SDA, HIGH);
    temp = temp << 1;
    //最少250ns延时
    digitalWrite(SCL, HIGH);
  }
  digitalWrite(SCL, LOW);

  digitalWrite(SDA, HIGH);

  digitalWrite(SCL, HIGH);
  //不进行应答检测
  digitalWrite(SCL, LOW);
}
//启动信号
//SCL在高电平期间，SDA由高电平向低电平的变化定义为启动信号
void IIC_start()
{
  digitalWrite(SDA, HIGH);

  digitalWrite(SCL, HIGH);
  //所有操作结束释放SCL
  digitalWrite(SDA, LOW);

  digitalWrite(SCL, LOW);

  IIC_write(0x78);
}

//停止信号
//SCL在高电平期间，SDA由低电平向高电平的变化定义为停止信号
void IIC_stop()
{
  digitalWrite(SDA, LOW);

  digitalWrite(SCL, HIGH);

  digitalWrite(SDA, HIGH);
}

void OLED_send_cmd(unsigned char o_command)
{

  IIC_start();
  IIC_write(0x00);
  IIC_write(o_command);
  IIC_stop();
}
void OLED_send_data(unsigned char o_data)
{
  IIC_start();
  IIC_write(0x40);
  IIC_write(o_data);
  IIC_stop();
}
void Column_set(unsigned char column)
{
  OLED_send_cmd(0x10 | (column >> 4));   //设置列地址高位
  OLED_send_cmd(0x00 | (column & 0x0f)); //设置列地址低位
}
void Page_set(unsigned char page)
{
  OLED_send_cmd(0xb0 + page);
}
void OLED_clear(void)
{
  unsigned char page, column;
  for (page = 0; page < 8; page++) //pageloop
  {
    Page_set(page);
    Column_set(0);
    for (column = 0; column < 128; column++) //columnloop
    {
      OLED_send_data(0x00);
    }
  }
}
void OLED_full(void)
{
  unsigned char page, column;
  for (page = 0; page < 8; page++) //pageloop
  {
    Page_set(page);
    Column_set(0);
    for (column = 0; column < 128; column++) //columnloop
    {
      OLED_send_data(0xff);
    }
  }
}
void OLED_init(void)
{
  unsigned char i;
  for (i = 0; i < 25; i++)
  {
    OLED_send_cmd(OLED_init_cmd[i]);
  }
}

/// 将一个char串展示
void Picture_display(const unsigned char *ptr_pic)
{
  unsigned char page, column;
  for (page = 0; page < (64 / 8); page++) //pageloop
  {
    Page_set(page);
    Column_set(0);
    for (column = 0; column < 128; column++) //columnloop
    {
      OLED_send_data(*ptr_pic++);
    }
  }
}

/// 反转展示
void Picture_ReverseDisplay(const unsigned char *ptr_pic)
{
  unsigned char page, column, data;
  for (page = 0; page < (64 / 8); page++) //pageloop
  {
    Page_set(page);
    Column_set(0);
    for (column = 0; column < 128; column++) //columnloop
    {
      data = *ptr_pic++;
      data = ~data;
      OLED_send_data(data);
    }
  }
}

void IO_init(void)
{
  pinMode(SCL, OUTPUT); //设置数字脚为输出 SCL
  pinMode(SDA, OUTPUT); //设置数字脚为输出 SDA
}

void OLED_INIT()
{
  point = &picture_tab[0];
  IO_init();
  OLED_init();
  OLED_full();
  delay(1000);
  OLED_clear();
}
